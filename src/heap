#!/bin/bash
# Bash-lambda disk-based heap

# We need 128 bits of entropy for the heap directory name. This gives us
# guarantees about the soundness of conservative garbage collection ... for the
# rest of the story, see src/gc.

# 128 bits total / 15 bits per random number = 9 numbers
bash_lambda_genkey() { declare i
                       for (( i = 0; i < 9; i += 1 )); do
                         printf '%04x' $RANDOM; done; }

# Allow the user to override the heap location if they want to. However, this
# may compromise the effectiveness of conservative GC.
export BASH_LAMBDA_KEY=$(bash_lambda_genkey)
export BASH_LAMBDA_HEAP=${BASH_LAMBDA_HEAP:-/tmp/blheap-$$-$BASH_LAMBDA_KEY}

mkdir -p "$BASH_LAMBDA_HEAP" || return 1
ln -s "$BASH_LAMBDA_HEAP" "$BASH_LAMBDA_HEAP/.weak-references"
date +%s > "$BASH_LAMBDA_HEAP/.last-gc"
bash_lambda_nuke_heap() { [[ "${BASH_LAMBDA_HEAP:0:5}" == "/tmp/" ]] &&
                          rm -rf "$BASH_LAMBDA_HEAP"; }
trap bash_lambda_nuke_heap EXIT
export PATH="$PATH:$BASH_LAMBDA_HEAP"

# Heap allocation
bash_lambda_gensym() { mktemp "$BASH_LAMBDA_HEAP/${1:-gensym}_XXXXXXXXXXXX"; }

bash_lambda_cons() {
  if [[ $1 == '-n' ]]; then declare file=$BASH_LAMBDA_HEAP/$2
  else                      declare file="$(bash_lambda_gensym $1)"; fi

  # If garbage collection is in-progress, mark the object to prevent it from
  # being collected this time around. We don't mark it as having been visited,
  # however; doing that would cause anything it makes live to be collected
  # erroneously.
  touch "$BASH_LAMBDA_HEAP/.gc-marked-set/${file##*/}" >& /dev/null

  cat - > $file &&      # Take everything from stdin
    chmod u+x $file &&  # All conses are executable
    echo $file; }
