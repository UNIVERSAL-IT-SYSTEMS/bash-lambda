#!/bin/bash
# Bash-lambda function and closure allocation

bash_lambda_fn_body() {
  echo '#!/bin/bash'
  declare name=$(bash_lambda_genkey)
  echo "$name() {"
  declare i
  for (( i = 1; i <= $#; i += 1 )); do
    if (( $i < $# )); then echo "declare -r ${!i}=\$$i"
    else                   echo "${!i}"; fi; done
  echo "}"
  echo "$name \"\$@\""; }

bash_lambda_fn() {
  # Yup, we're allocating closures by writing to files and returning their
  # names to the callers. This gives you controllable persistence, heap
  # allocation, and the ability to reference the same closures across multiple
  # processes.
  bash_lambda_fn_body "$@" | bash_lambda_cons fn; }

bash_lambda_cons_fn() {
  # Same as bash_lambda_fn, but body is specified from stdin. Useful for
  # multiline functions when used with heredocs.
  (bash_lambda_fn_body "$@" "$(cat -)") | bash_lambda_cons fn; }

# Exports an already-defined function into the heap, returning its reference.
bash_lambda_extern() {
  bash_lambda_fn_body "$(declare -f $1 | grep '^  ')" | \
    bash_lambda_cons extern; }
