#!/bin/bash
# Bash-lambda futures (asynchronous processes)

# Futures are files consisting of three lines:
# 1. The filename of the output collector
# 2. The filename of the exit code collector
# 3. The filename of the named pipe that will be closed upon completion
#
# We can't use PID-based locking (e.g. via 'wait') because the future might
# belong to a subshell. To fix this, we need to instead allocate a FIFO that
# listeners can read against, and that the background job will close once it is
# finished.

bash_lambda_future() {
  # Construct a future around the given function application. To do this, we
  # run the function in the background and pipe its output to a temporary file.
  # We also record its exit code.

  declare output=$(bash_lambda_cons future_output < /dev/null)
  declare exit_code=$(bash_lambda_cons future_status < /dev/null)
  declare fifo=$(bash_lambda_cons future_fifo < /dev/null)

  rm $fifo && mkfifo $fifo

  ("$@" > $output; echo $? > $exit_code; (echo; sleep 1; echo) > $fifo &
                                         rm $fifo) >& /dev/null &
  printf $"%s\n%s\n%s" $output $exit_code $fifo | bash_lambda_cons future; }

bash_lambda_future_done() {
  # Exits with 0 if the future is finished, 1 if still running. If 0, a
  # future_get call will block only on IO, but not on job completion.
  [[ -s "$(bash_lambda_nth 1 "$1")" ]]; }

bash_lambda_future_get() {
  # This function blocks on the future's process if it is still running, and
  # its stdout and exit code are proxied.

  bash_lambda_future_done "$1" || cat "$(bash_lambda_nth 2 "$1")" >& /dev/null
  cat "$(bash_lambda_nth 0 "$1")"
  return "$(< "$(bash_lambda_nth 1 "$1")")"; }
