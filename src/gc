#!/bin/bash
# Bash-lambda concurrent mark-sweep garbage collector

# BASH_LAMBDA_GC_SECONDS=0 will disable automatic GC
# BASH_LAMBDA_GC_CONCURRENT=0 will cause GC to be synchronous
export BASH_LAMBDA_GC_SECONDS=${BASH_LAMBDA_GC_SECONDS:-30}
export BASH_LAMBDA_GC_CONCURRENT=${BASH_LAMBDA_GC_CONCURRENT:-1}

mkdir -p "$BASH_LAMBDA_HEAP"/.gc-permanent

# Can we see this unexported variable from the garbage collector? If not, then
# we don't have access to the full root set. If you unset this, GC will refuse
# to run. We need this to be a weak ref so the exported variable doesn't show
# up in the root set by itself. These two variables should be identical modulo
# path.
BASH_LAMBDA_GC_CANARY=$(bash_lambda_cons < /dev/null)
export BASH_LAMBDA_GC_KEY=$(bash_lambda_weak_ref $BASH_LAMBDA_GC_CANARY)

# This function can be run asynchronously: bash_lambda_gc &. See
# bash_lambda_auto_gc for an example. It knows which heap to run on, and it
# echoes information about the number of objects and bytes reclaimed.
bash_lambda_gc() {
  # Avert disaster: never GC a heap unless it is in /tmp.
  if [[ "${BASH_LAMBDA_HEAP:0:5}" != "/tmp/" ]]; then
    echo 'bash_lambda_gc refuses to run because $BASH_LAMBDA_HEAP is set to'
    echo 'a directory outside of /tmp/. If you really want to do this, you'
    echo 'should do something like /tmp/../wherever.'
    return 2; fi

  # Try to acquire the GC lock. If we can't, another GC is probably running; so
  # we exit immediately since GC is (ideally) idempotent.
  mkdir "$BASH_LAMBDA_HEAP"/.gc-visited-set || return 1
  mkdir -p "$BASH_LAMBDA_HEAP"/.gc-marked-set

  # We have the lock. At this point the heap allocator will mark any new
  # objects that are created, so we can use the root set that exists right now
  # and start marking objects referenced by that root set.
  bash_lambda_gc_roots | bash_lambda_ref_children | (declare x; while read x; do
    bash_lambda_ref_visit "$BASH_LAMBDA_HEAP/.gc-visited-set" "$x"; done)

  # We should mark the canary. If we haven't done this, then something is wrong
  # with the root-set computation.
  if [[ ! -e "$BASH_LAMBDA_HEAP/.gc-visited-set/${BASH_LAMBDA_GC_KEY##*/}" ]]
  then
    echo 'bash_lambda_gc cannot see the full root set. You should make sure'
    echo 'it is being run as a function, not as an indirect script; try using'
    echo 'bash_lambda_gc instead of just gc.'
    rm -r "$BASH_LAMBDA_HEAP/".gc-{visited,marked}-set
    return 1; fi

  # Now nuke anything that isn't either marked or permanent.
  ls -d "$BASH_LAMBDA_HEAP"/* | (
    declare ref reclaimed=() reclaimed_size=0
    while read ref; do
      if [[ ! -e "$BASH_LAMBDA_HEAP/.gc-marked-set/${ref##*/}" &&
            ! -e "$BASH_LAMBDA_HEAP/.gc-visited-set/${ref##*/}" &&
            ! -e "$BASH_LAMBDA_HEAP/.gc-permanent/${ref##*/}" ]]; then
        reclaimed+=("$ref")
        reclaimed_size=$((reclaimed_size + $(du -sb "$ref" | cut -f 1)))
        rm -rf "$ref"; fi; done
    echo "${#reclaimed[@]} $reclaimed_size")

  # We are now done. Remove the marked-set directory and echo some stats about
  # the stuff we collected.
  rm -rf "$BASH_LAMBDA_HEAP/".gc-{marked,visited}-set; }

bash_lambda_auto_gc() {
  # Trigger a concurrent GC if it's been more than some number of seconds since
  # the last one. This turns out to be one of the few constant-time ways we can
  # do this safely.
  if [[ ! -e "$BASH_LAMBDA_HEAP/.last-gc" ]] || \
     (( $BASH_LAMBDA_GC_SECONDS &&
        $(date +%s) - $(<"$BASH_LAMBDA_HEAP/.last-gc") >
          $BASH_LAMBDA_GC_SECONDS )); then
    date +%s > "$BASH_LAMBDA_HEAP/.last-gc"

    # NOTE: Running GC concurrently is experimental and is known to have some
    # problems unless done carefully. See comments in bash_lambda_gc for
    # details.
    if (( $BASH_LAMBDA_GC_CONCURRENT )); then
      (bash_lambda_gc --concurrent >> "$BASH_LAMBDA_HEAP/.gc-log" &)
    else
      bash_lambda_gc >> "$BASH_LAMBDA_HEAP/.gc-log"
    fi; fi; }

bash_lambda_heap_stats() {
  printf '%-20s %s\n%-20s %d\n%-20s %d\n' \
    'heap size:' $(du -sh "$BASH_LAMBDA_HEAP" | cut -f 1) \
    'objects:'   $(ls "$BASH_LAMBDA_HEAP" | wc -l) \
    'permanent:' $(ls "$BASH_LAMBDA_HEAP/.gc-permanent" | wc -l); }

bash_lambda_heap_ls() { cd "$BASH_LAMBDA_HEAP"; ls "$@"; }

bash_lambda_gc_pin()   { touch "$BASH_LAMBDA_HEAP/.gc-permanent/${1##*/}";
                         echo "$1"; }

bash_lambda_gc_unpin() { rm -f "$BASH_LAMBDA_HEAP/.gc-permanent/${1##*/}";
                         echo "$1"; }

bash_lambda_gc_roots() {
  declare; ps ax; ls -d "$BASH_LAMBDA_HEAP/.gc-permanent"/* | (declare x
    while read x; do echo "$BASH_LAMBDA_HEAP/${x##*/}"; done); }
