#!/bin/bash
# Bash-lambda concurrent mark-sweep garbage collector

# BASH_LAMBDA_GC_SECONDS=0 will disable automatic GC
# BASH_LAMBDA_GC_CONCURRENT=0 will cause GC to be synchronous
export BASH_LAMBDA_GC_SECONDS=${BASH_LAMBDA_GC_SECONDS:-30}
export BASH_LAMBDA_GC_CONCURRENT=${BASH_LAMBDA_GC_CONCURRENT:-1}

mkdir -p $BASH_LAMBDA_HEAP/.gc-permanent

# This function can be run asynchronously: bash_lambda_gc &. See
# bash_lambda_auto_gc for an example. It knows which heap to run on, and it
# echoes information about the number of objects and bytes reclaimed.
bash_lambda_gc() {
  # Here are the known cases where an object can be prematurely collected:
  #
  # 1. Immediately after entering a command. At this point the command-line
  #    will have been parsed and conses will be allocated, but the parent
  #    process ID may not yet exist. This will prevent us from detecting
  #    objects in the process table roots.
  # 2. When it appears in a delayed command. For example:
  #    $ sleep 5; map $(fn ...) $my_list
  #    The $(fn) form is evaluated immediately but won't be visible in the root
  #    set for another five seconds.
  #
  # To guard against this, we should only run the collector when (1) the user
  # is at a prompt and any foreground job has completed, and (2) there are no
  # background jobs.
  [[ -z "$(jobs)" ]] || return 1

  # Try to acquire the GC lock. If we can't, another GC is probably running; so
  # we exit immediately since GC is (ideally) idempotent.
  mkdir $BASH_LAMBDA_HEAP/.gc-visited-set || return 1
  mkdir -p $BASH_LAMBDA_HEAP/.gc-marked-set

  # We have the lock. At this point the heap allocator will mark any new
  # objects that are created, so we can use the root set that exists right now
  # and start marking objects referenced by that root set.
  bash_lambda_gc_roots |
  (declare ref; while read ref; do bash_lambda_gc_visit "$ref"; done)

  # Now nuke anything that isn't either marked or permanent.
  ls -d $BASH_LAMBDA_HEAP/* | (
    declare ref reclaimed=() reclaimed_size=0
    while read ref; do
      if [[ ! -e "$BASH_LAMBDA_HEAP/.gc-marked-set/${ref##*/}" &&
            ! -e "$BASH_LAMBDA_HEAP/.gc-permanent/${ref##*/}" ]]; then
        reclaimed[${#reclaimed[@]}]="$ref"
        reclaimed_size=$((reclaimed_size + $(du -sb "$ref" | cut -f 1)))
        rm -rf "$ref"; fi; done
    echo "${#reclaimed[@]} $reclaimed_size")

  # We are now done. Remove the marked-set directory and echo some stats about
  # the stuff we collected.
  rm -rf $BASH_LAMBDA_HEAP/.gc-{marked,visited}-set; }

bash_lambda_auto_gc() {
  # Trigger a concurrent GC if it's been more than some number of seconds since
  # the last one. This turns out to be one of the few constant-time ways we can
  # do this safely.
  if (( $BASH_LAMBDA_GC_SECONDS &&
        $(date +%s) - $(<$BASH_LAMBDA_HEAP/.last-gc) >
          $BASH_LAMBDA_GC_SECONDS )); then
    date +%s > $BASH_LAMBDA_HEAP/.last-gc

    # NOTE: Running GC concurrently is experimental and is known to have some
    # problems unless done carefully. See comments in bash_lambda_gc for
    # details.
    if (( $BASH_LAMBDA_GC_CONCURRENT )); then
      (bash_lambda_gc --concurrent >> $BASH_LAMBDA_HEAP/.gc-log &)
    else
      bash_lambda_gc >> $BASH_LAMBDA_HEAP/.gc-log
    fi; fi; }

bash_lambda_gc_roots() { (declare; ps ax) | bash_lambda_gc_refs; }

bash_lambda_heap_stats() {
  printf '%-20s %s\n%-20s %d\n%-20s %d\n' \
    'heap size:' $(du -sh $BASH_LAMBDA_HEAP | cut -f 1) \
    'objects:'   $(ls $BASH_LAMBDA_HEAP | wc -l) \
    'permanent:' $(ls $BASH_LAMBDA_HEAP/.gc-permanent | wc -l); }

bash_lambda_gc_pin() {
  # Pins an object so that it will never be collected.
  touch $BASH_LAMBDA_HEAP/.gc-permanent/${1##*/};
  echo "$1"; }

bash_lambda_gc_visit() {
  # The ref in question must be an object that exists in the heap. We expect it
  # to be a full pathname, though the object itself should be a direct child of
  # the heap directory.
  declare child ref="$1" ref_name="${ref#$BASH_LAMBDA_HEAP/}"

  # No need to mark an object in a subdirectory. It isn't a direct child of the
  # heap, so its storage is already being managed by the directory it belongs
  # to.
  if [[ ! ("$ref_name" =~ /) ]]; then
    # Have we already visited this object? If so, no need to revisit it.
    [[ -e $BASH_LAMBDA_HEAP/.gc-visited-set/$ref_name ]] && return 0

    # Otherwise, mark the object and everything it points to.
    touch $BASH_LAMBDA_HEAP/.gc-{marked,visited}-set/$ref_name; fi

  if [[ -d "$ref" ]]; then
    for child in $ref/*; do bash_lambda_gc_visit "$child"; done
  else
    # Search for GC refs in the child.
    bash_lambda_gc_refs < "$ref" | (declare child; while read child; do
      bash_lambda_gc_visit "$child"; done); fi; }

bash_lambda_gc_refs() {
  # Locate occurrences of the heap directory. This name contains 128 bits of
  # pseudorandom entropy, so we are unlikely to see it spuriously referenced.
  # If we observe a path that exists, then we consider that to be a reference
  # for GC purposes.

  # This function is a total hack.
  egrep -o "$BASH_LAMBDA_HEAP/[^ /\)\}\"']+" | (declare ref; while read ref; do
    [[ -e "$ref" ]] && echo "$ref"; done); }
