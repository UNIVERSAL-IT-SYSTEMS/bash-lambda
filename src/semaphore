#!/bin/bash
# Bash-lambda semaphores and mutexes

# Semaphores are directories that contain empty numbered subdirectories along
# with an immutable file containing the capacity of the semaphore. Locking is
# done by attempting to create one of these empty subdirectories, and ls -d |
# wc -l is used to get the number of used entries.

bash_lambda_semaphore() {
  declare capacity=$1 semaphore=$(bash_lambda_dir semaphore)
  echo $capacity > "$semaphore/capacity"
  echo "$semaphore"; }

bash_lambda_semaphore_grab() {
  # Take an item from the semaphore; returns the item's identifier (a path, but
  # you don't need to know this) and exit code 0 if successful, returns 1 and
  # outputs nothing if unsuccessful.
  declare semaphore=$1 i capacity=$(<"$1/capacity")
  for (( i = 0; i < $capacity; i += 1 )); do
    if mkdir "$semaphore/semaphore_$i" >& /dev/null; then
      echo "$semaphore/semaphore_$i"; return 0; fi; done
  return 1; }

bash_lambda_semaphore_release() {
  # Releases an item from the semaphore. You can just pass the item here; no
  # need to pass the semaphore also.
  rmdir "$1"; }

bash_lambda_semaphore_count() {
  # Counts the number of items available in the semaphore.
  declare semaphore=$1
  echo $(( $(<"$semaphore/capacity") + 1 - $(ls -d "$semaphore/"* | wc -l) )); }

bash_lambda_semaphore_wrap() {
  # Wraps a function's execution with a grab/release of a semaphore item.
  declare s=$1 f=$2
  bash_lambda_fn "declare lock
                  if lock=\$(bash_lambda_semaphore_grab $s); then
                    $f \"\$@\"
                    declare status=\$?
                    bash_lambda_semaphore_release \$lock
                    exit \$status; fi"; }

# Mutex: a more efficient way to do a single-element semaphore.
bash_lambda_mutex()         { bash_lambda_dir mutex; }
bash_lambda_mutex_grab()    { mkdir "$1/lock" >& /dev/null && echo "$1/lock"; }
bash_lambda_mutex_release() { rmdir "$1"; }
bash_lambda_mutex_count()   { [[ -d "$1/lock" ]]; echo $?; }

bash_lambda_mutex_wrap() {
  declare m=$1 f=$2
  bash_lambda_fn "declare lock
                  if lock=\$(bash_lambda_mutex_grab $m); then
                    $f \"\$@\"
                    declare status=\$?
                    bash_lambda_mutex_release \$lock
                    exit \$status; fi"; }
